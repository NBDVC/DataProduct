library(caret)
data(mtcars)
View(mtcars)
mtcars$ID<-1:32
RF<-train(ID~., meth="rf", data=mtcars)
apply(mtcars, 2, FUN=median)
tesing<-apply(mtcars, 2, FUN=median)
predict(RF, newdata=testing)
rm(tesing)
testing<-apply(mtcars, 2, FUN=median)
predict(RF, newdata=testing)
testing$cyl
testing[cyl]
testing["cyl"]
RF
mtcars$cyl
testing[''cyl']
testing['cyl']
str(mtcars)
RF<-train(ID~., meth="rf", data=mtcars[,-'cyl'])
RF<-train(ID~., meth="rf", data=mtcars[,-cyl])
RF<-train(ID~., meth="rf", data=mtcars[,-"cyl"])
RF<-train(ID~., meth="rf", data=mtcars[,-2])
predict(RF, newdata=testing)
testing<-data.frame(testing)
View(testing)
?data.frame
matrix
?matrix
testing<-matrix(testing)
View(testing)
testing<-apply(mtcars, 2, FUN=median)
testing<-matrix(testing, nrow=1, ncol=12)
View(testing)
testing<-apply(mtcars, 2, FUN=median)
Cnames<colnames(testing)
testing<-matrix(testing, nrow=1, ncol=12)
Cnames<-names(testing)
testing<-data.frame(testing)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
View(testing)
colnames(testing)<-Cnames
View(testing)
predict(RF, newdata=testing)
RF<-train(factor(ID)~., meth="rf", data=mtcars)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
RF<-train(ID~., meth="rf", data=mtcars)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
colnames(testing)<-Cnames
predict(RF, newdata=testing)
RF<-train(ID~., meth="rf", data=mtcars)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
colnames(testing)<-Cnames
predict(RF, newdata=testing)
round(predict)
str(predict(RF, newdata=testing))
rowname(mtcars[predict(RF, newdata=testing)])
rname(mtcars[predict(RF, newdata=testing)])
rname(mtcars[predict(RF, newdata=testing),])
rowname(mtcars[predict(RF, newdata=testing),])
?Rownames
?rownames
rownames(mtcars[predict(RF, newdata=testing),])
View(testing)
testing[,2]<-8
View(testing)
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-4
rownames(mtcars[predict(RF, newdata=testing),])
testing[,7]<-11
rownames(mtcars[predict(RF, newdata=testing),])
library(caret)
data(mtcars)
View(mtcars)
mtcars$ID<-1:32
str(mtcars)
RF<-train(ID~., meth="rf", data=mtcars)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
colnames(testing)<-Cnames
rownames(mtcars[predict(RF, newdata=testing),])
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-4
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-8
rownames(mtcars[predict(RF, newdata=testing),])
library("shiny", lib.loc="~/R/win-library/3.0")
runExample("01_hello")
dir()
?dir.create()
dir.create(DataProduct1)
dir.create("DataProduct1")
dir
dir()
setwd(.\DataProduct1)
setwd(./DataProduct1)
setwd("DataProduct1")
setwd("../")
dir()
runApp("DataProduct1")
runApp("DataProduct1")
runApp("DataProduct1")
runApp("DataProduct1")
runApp("DataProduct1")
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
runApp(DataProduct1)
library(shiny)
runApp(DataProduct1)
runApp("DataProduct1")
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
?mtcars
shiny::runApp('DataProduct1')
summary(mtcars$wt)
summary(mtcars$qsec)
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
library(caret)
data(mtcars)
View(mtcars)
mtcars$ID<-1:32
str(mtcars)
RF<-train(ID~., meth="rf", data=mtcars)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
colnames(testing)<-Cnames
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-4
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-8
rownames(mtcars[predict(RF, newdata=testing),])
importance(RF)
set.seed(4543)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000,
keep.forest=FALSE, importance=TRUE)
importance(mtcars.rf)
importance(mtcars.rf, type=1)
importance(RF)
varImp(RF)
RF<-train(ID~., meth="rf", data=mtcars, importance = TRUE)
library(caret)
data(mtcars)
View(mtcars)
mtcars$ID<-1:32
str(mtcars)
RF<-train(ID~., meth="rf", data=mtcars, importance = TRUE)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
colnames(testing)<-Cnames
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-4
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-8
rownames(mtcars[predict(RF, newdata=testing),])
library(caret)
data(mtcars)
View(mtcars)
mtcars$ID<-1:32
str(mtcars)
RF<-train(ID~., meth="rf", data=mtcars, importance = TRUE)
testing<-apply(mtcars, 2, FUN=median)
Cnames<-names(testing)
testing<-matrix(testing, nrow=1, ncol=12)
testing<-data.frame(testing)
colnames(testing)<-Cnames
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-4
rownames(mtcars[predict(RF, newdata=testing),])
testing[,2]<-8
rownames(mtcars[predict(RF, newdata=testing),])
varImp(RF)
shiny::runApp('DataProduct1')
summary(mtcars)
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
?renderText
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
?plotOutput
?textOutput
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
View(testing)
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
RF<-train(ID~., meth="rf", data=mtcars, importance = TRUE)
library(caret)
data(mtcars)
mtcars$ID<-1:32
qus<-""
RF<-train(ID~., meth="rf", data=mtcars, importance = TRUE)
save(RF)
shiny::runApp('DataProduct1')
save(RF, file=ML.R)
save(RF, file="ML.RData")
load("ML.RData")
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
?predict
library(caret)
?predict
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
View(mtcars)
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
shiny::runApp('DataProduct1')
date: /r date()
date: \r date()
date: {r date()}
date: {r} date()
date: date()
date: 11-13-2014
date: "11-13-2014"
date:
date: $now()$
date: 'now()'
Sys.Date()
load("C:/Users/Greg/Desktop/DataProduct/DataProduct1/ML.RData")
?impvar
?impVar
?Impar
?Impvar
library("caret", lib.loc="~/R/win-library/3.1")
?Impvar
?ImpVar
?impVar
?impVars
?impvar
varImp(RF)
plot(varImp(RF))
load("C:/Users/Greg/Desktop/DataProduct/DataProduct1/ML.RData")
```{r, echo=FALSE}
Having not set the random seed the importance of variables shifted from initial setup.  Could be addressed in Re-engineering effort.
shiny::runApp('DataProduct1')
